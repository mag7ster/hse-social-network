openapi: 3.0.3
info:
  title: User Service API
  description: API for user registration, login, profile management, and session management.
  version: 2.2.8
  contact:
    name: Makar Vanyan
servers:
  - url: http://localhost:8090
    description: My machine
paths:
  /register:
    post:
      summary: Register a new user
      operationId: registerUser
      requestBody:
        description: User registration details
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                  description: The username of the user (alphanumeric)
                email:
                  type: string
                  description: The email of the user
                password:
                  type: string
                  description: The password for the user
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered
        '400':
          description: Invalid input data
        '500':
          description: Internal server error

  /login:
    post:
      summary: Log in an existing user
      operationId: loginUser
      requestBody:
        description: User login details
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - login
                - password
              properties:
                login:
                  type: string
                  description: The login (username or email) of the user (alphanumeric)
                password:
                  type: string
                  description: The password of the user
      responses:
        '200':
          description: Successful login with token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for the session
        '400':
          description: Invalid input data
        '401':
          description: Invalid credentials
        '500':
          description: Internal server error

  /whoami:
    get:
      summary: Get current user details
      operationId: getCurrentUser
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Current user profile information
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  email:
                    type: string
                  createdAt:
                    type: string
                    format: date-time
                  role:
                    type: string
        '401':
          description: Unauthorized - Invalid or missing token
        '404':
          description: User not found

  /profile/update:
    put:
      summary: Update user profile
      operationId: updateProfile
      security:
        - BearerAuth: []
      requestBody:
        description: Profile data to be updated
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: First name of the user
                lastName:
                  type: string
                  description: Last name of the user
                bio:
                  type: string
                  description: A short bio for the user
                avatarURL:
                  type: string
                  description: URL of the avatar image
      responses:
        '200':
          description: Profile successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile updated
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized - Invalid or missing token
        '404':
          description: Profile not found

  /profile:
    get:
      summary: Get user profile
      operationId: getProfile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  firstName:
                    type: string
                  lastName:
                    type: string
                  bio:
                    type: string
                  avatarURL:
                    type: string
                  updatedAt:
                    type: string
                    format: date-time
        '401':
          description: Unauthorized - Invalid or missing token
        '404':
          description: Profile not found

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        createdAt:
          type: string
          format: date-time
        role:
          type: string

    UserProfile:
      type: object
      properties:
        id:
          type: integer
        userID:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        bio:
          type: string
        avatarURL:
          type: string
        updatedAt:
          type: string
          format: date-time

    UserSession:
      type: object
      properties:
        id:
          type: integer
        userID:
          type: integer
        token:
          type: string
        loginAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
        ipAddress:
          type: string

security:
  - BearerAuth: []
